While you are working to implement this challenge, you must document your entire work: your initial thoughts, plans, approach, unit test results, overall result, results analysis, and conclusion. It is highly recommended that your documentation is as thorough as possible.

Initial Thoughts:
Should I use a database to handle the data? Did some research on sql and nosql and realized that in either situation, I won't need to plan to host my own database server as output should be written to a csv file.

List data structure might be the best option to hold the two categories of ppl

Will I need to check/sort every customer? I will need to compare something with each customer, and the best way to do this will be to compare the coordinates to check if they are within the 10 mile radius. and if they are, I will put them into a match list and sort when i reach the end of the recipient list

To parse I will need to use commas, ',', as the delimiter and new lines '/n' to seperate each customer/recipient object.


Plan:
Create two classes, customer and recipient to hold information

Parse customer and recipients into their respective objects and put them into their lists: customer_list, recipient_list

Create a function to calculate the distance between two coordinates, thought maybe I should also add an extra feature using google maps API but this will be a stretch goal

Add to the customer list a list of matches to hold the recipients found within the 10 mile radius and sort when a customer has compared itself to all recipients
Matches will be based on timezone, hours, as well as the restrictions/categories

Miles between longitude and latitude coordinates -> those that are in 10 mile ranges of the customer I will save into a data structure for further sorting

Output results to CSV file in some format -> Customer  | List of Recipients -> Address, Miles away, List of Receivers
I was thinking that if there was a feature that the application can plan out multiple routes/destinations creating multiple csv files can be used as a cache for the present and be updated as the user finishes each of their trips and location/traffic changes

Developing:
Created a seperate folder for handling CSV read and write

Created a seperate folder for handling distance calculating, since I might be creating a calculator to calculate distance, I might look into
subclassing/interfacing an abstract class to handle the different kind of calculations. Leaning towards interface as a Distance calculator
can be many different types of calculators, ones that can calculate solely based on longitude and latitude, or calculate distance through the
google maps api

Different ways to sort, as there were different ways to calculate the differences, thus I will use the same process.

To create the function that would output 1 or 0 if the categories of the customer and the restrictions of the recipient
matched, I initially tried to convert the integer into a string and then back into a binary string so that I can compare each bit.
Only after 15-20 mins of being somewhat frustrated from trying to optimize the amount of conversions I had made (2-3...)
I realized I could just use the '&' bit-wise logical
operator to have the behavior I wanted.

At first to create matches I thought that I could create a neat feature for the user of the program to select the date of pick up....
only to realize later that that would be obsolete as the days to compare recipient and customer times are dependent on the pickup date and time
of the customer. Wasted a few hours on this oh well :/.
