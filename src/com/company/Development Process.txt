While you are working to implement this challenge, you must document your entire work: your initial thoughts, plans,
approach, unit test results, overall result, results analysis, and conclusion. It is highly recommended that your
documentation is as thorough as possible.

Initial Thoughts:

    I am wondering if I should use a database to handle the data? After some some research on sql and nosql I realized
    that in either situation, I won't need to plan to host my own database server as output should be written to a csv file.

    Will I need to check/sort every customer? I will need to compare something with each customer, and the best way to do
    this will be to compare the coordinates to check if they are within the 10 mile radius. and if they are, I will put
    them into a match list and sort when i reach the end of the recipient list

    List data structure might be the best option to hold the two categories of ppl because for each customer, I will have
    to compare their coordinates to the coordinates of the recipient.

    To parse I will need to use commas, ',', as the delimiter and new lines '/n' to separate each customer/recipient object.

    From here I started coding while thinking about the various things I need to do.

Plan and approach:

    Created Customer and Recipient Classes to hold profile information.

    Initial Matching Algorithm:
    Parse customer and recipients into their respective objects and put them into their lists: customer_list, recipient_list
    Create a function to calculate the distance between two coordinates, thought maybe I should also add an extra feature
    using google maps API but this will be a stretch goal.
    Add to the customer list a list of matches to hold the recipients found within the 10 mile radius and sort when a
    customer has compared itself to all recipients.

    Matches will be based on timezone, hours, as well as the restrictions/categories. Thus I need to figure out time zone
    offsets and computing the actual time at that moment. For restrictions and categories I will just have to compare their
    bits.

    Initial thoughts on how to sort matches:
    I googled/stackoverflowed how to find the distance from one point to another but in the real world that is not realistic
    at all. Perhaps I will go with the google maps implementation once I have this feature done. Using the strategy
    pattern would not be a bad idea as there are many different ways for the calculator to calculate the distance.

    Initial thoughts on Output:
    Output results to CSV file in some format -> Customer  | List of Recipients -> Address, Miles away, List of Receivers
    I was thinking that if there was a feature that the application can plan out multiple routes/destinations
    creating multiple csv files can be used as a cache for the present and be updated as the user finishes each of
    their trips and location/traffic changes.

Developing Code and Process:
    Created a separate package for handling CSV read and write,
    Package for sorting,
    Package for Calculating distance


    Created a separate folder for handling distance calculating, since I might be creating a distanceCalculator to calculate distance, I might look into
    subclassing/interfacing an abstract class to handle the different kind of calculations. Leaning towards interface as a Distance distanceCalculator
    can be many different types of calculators, ones that can calculate solely based on longitude and latitude, or calculate distance through the
    google maps api

    Different ways to sort, as there were different ways to calculate the differences, thus I will use the same process.

    Developing:

    Matching Category to Restriction:
    To create the function that would output 1 or 0 if the categories of the customer and the restrictions of the recipient
    matched, I initially tried to convert the integer into a string and then back into a binary string so that I can compare
    each bit. Only after 15-20 mins of being somewhat frustrated from trying to optimize the amount of conversions
    I had made (2-3...) I realized I could just use the '&' bit-wise logical operator to have the behavior I wanted.

    At first to create matches I thought that I could create a neat feature for the user of the program to select the date
    of pick up.... but I realized realize that that would be obsolete as the days to compare recipient and customer
    times are dependent on the pickup date and time of the customer.

    For matches that give abnormal information such as picking up between 1-7AM or such, I returned
    null and handled the passed down data by proceeding to the next match to check.

    Figuring out time discrepancy:
    Because customer and recipient would be in the same location, I thought it would be fine if I didn't figure out the
    timezone offset. However after more careful deliberation, the hours that I use to compare won't be the true hours in
    that location, and so I figured out from the java documentation a way to find out the time in a specific time zone
    location. Because of the dependency I recognized before, it seemed like calculating the offset for the customer's time
    allowed me to use the recipients time without the offset as by converting the customer's local time, the recipient's
    times are set and will be in the same time. To figure out the recipient's bits for time calculation, I needed to
    pass from the customer object to the recipient objects what the day of the week was to output the appropriate bits
    for their hours of operation. Initially used calendar and day classes from the java library, but noticed it was
    deprecated and was difficult to work with. Luckily after researching a bit more I found the
    TimeZone, DateTimeFormatter, LocalDateTime, and ZonedDateTime classes to help me figure out the time.

    Sorting recipients:
    I made the recipients a new member variable called distanceFromCustomer so that I could keep track of the distance
    of the recipient from the customer, and would allow me to sort the recipient matches.
    Made the recipients implement comparable and overrided the comparable classes' compareTo function so that I could
    convert the ArrayList into an array, sort it based on the distance specified in the overridden compareTo function.

    Output recipients:
    Created a file in the CSV file called CSVMaker to handle the creating a csv files. Since the helper is the one
    who helps in dealing with these procedures, the helper will call on the maker to create the csv files. For creating the
    files (specific structure)

    TimeMatch: At first I had my function throw an IndexOutofBounds exception when the use case where the estimated drop off
    hours were from 1 AM -7 AM. But I realized that as a system, it can't handle errors in that way, thus I changed my
    implementation to return false instead. This gave me the idea to perhaps also have a way to sort the matches based on
    time of arrival, not just the regular distance.

    Google Maps API:
    This was honestly a stretch goal but I was able to complete it on Thursday. From the api call I passed the miles away
    as well as the duration of time traveled into my other functions easily and little change occurred to my code logic/flow
    from this extra feature. Used https://github.com/stleary/JSON-java library for JSONObject parsing and handling

Unit Testing Results:
    Tested all functions I wrote that can have variable logic.
    Customer:           Tested the dayOfPickUp function as that is passed to Recipient to find out their appropriate hours of operation
                        through their specific getter functions for each day
    Recipient:          Tested Recipient's dayOfPickUp function by passing in Customer's dayOfPickUp function.
                        Customer will pass to recipient int 1-7, Mon-Sun, for Recipient to return specific bits that
                        represent hours of operation
    Matches:            Tested bit comparison of donationMatch function. Also tests dropOff bits of recipients as well as
                        driving time parameters in timeMatch function.
    GMapCalculator:     Tested geomatrix distance for handling hours/mins and just mins from duration output

Overall Result:

For the first implementation, it is a straight map coordinate system distance calculation in miles
Second implementation is a Google maps API implementation factoring in driving time and driving distance.

Result Analysis:
The first implementation calculations are rather fast as it was purely math computational.
However for the second implementation, because I check each customer with each recipient, and adding onto
that each match requires an API call, it is rather slow to compile every single customer-recipient match.

Conclusion:
This challenge was pretty fun! When developing I tried to think about use/test cases of the program when used in
the real world and tried to handle all of these cases I could find or think of. I used JUNit to test specific modules,
the strategy pattern coding paradigm to handle the two implementations of distance calculations, and separated the flow
of logic and the program into seperate class files named accordingly to what they do or help with.